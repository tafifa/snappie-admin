openapi: 3.0.1
info:
  title: Default module
  description: >-
    Complete API collection for authentication, places, gamification, social
    media, and more
  version: 2.0.0
  contact:
    name: Snappie Platform Team
    email: support@snappie.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags:
  - name: API Info
  - name: Authentication
  - name: Users
  - name: Places
  - name: Articles
  - name: Gamification
  - name: Leaderboard
  - name: Social Media
paths:
  /:
    get:
      summary: API Information
      deprecated: false
      description: Get API version and endpoint information.
      tags:
        - API Info
      parameters: []
      responses:
        '200':
          description: API information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - {}
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Snappie API
                          version:
                            type: string
                            example: v1
                          description:
                            type: string
                            example: >-
                              Complete API for authentication, places,
                              check-ins, and reviews
                          endpoints:
                            type: array
                            items:
                              type: string
                            example:
                              - /auth
                              - /user
                              - /places
                              - /checkins
                              - /reviews
          headers: {}
      security:
        - bearer: []
  /auth/register:
    post:
      summary: Register new user
      deprecated: false
      description: ''
      tags:
        - Authentication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - gender
                - image_url
                - username
                - place_value
                - food_type
              properties:
                email:
                  type: string
                  description: User email address (must be unique)
                  format: email
                  default: testing@gmail.com
                name:
                  type: string
                  description: User full name
                  maxLength: 255
                  default: testing
                gender:
                  type: string
                  description: User gender
                  enum:
                    - male
                    - female
                    - other
                  example: male
                image_url:
                  type: string
                  description: User profile image URL
                  format: uri
                  maxLength: 500
                username:
                  type: string
                  description: Unique username
                  maxLength: 255
                  default: testing
                food_type:
                  type: array
                  items:
                    type: string
                    example: Nusantara
                  description: User preferred food types
                  maxItems: 3
                  uniqueItems: true
                  minItems: 3
                place_value:
                  type: array
                  items:
                    type: string
                    example: Harga Terjangkau
                  description: User preferred place values
                  maxItems: 3
                  uniqueItems: true
                  minItems: 3
            example:
              email: testing@gmail.com
              name: testing
              gender: female
              image_url: https://avatars.githubusercontent.com/u/20086665
              username: testing
              food_type:
                - Seafood
                - Non-Kafein
                - Pastry
              place_value:
                - Suasana Tradisional
                - Estetika
                - Pelayanan Ramah
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Registrasi berhasil! Selamat datang di Snappie!
                  data:
                    $ref: '#/components/schemas/User'
          headers: {}
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers: {}
      security: []
  /auth/login:
    post:
      summary: User login
      deprecated: false
      description: >-
        Login with email/username and password. Only one active session per user
        is allowed.
      tags:
        - Authentication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: User email or username
                  example: john@example.com
                remember:
                  type: boolean
                  description: Remember login session (extends token expiration to 30 days)
                  example: false
            example:
              email: tesing@gmail.com
              remember: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login berhasil!
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
                        description: Bearer token for authentication
                        example: 1|abcdef123456...
                      token_type:
                        type: string
                        example: Bearer
                      expires_at:
                        type: string
                        format: date-time
                        example: '2024-01-16T10:30:00.000000Z'
          headers: {}
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Email/username tidak valid.
          headers: {}
        '422':
          description: Validation error or user already logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: >-
                      Anda sudah login di perangkat lain. Silakan logout
                      terlebih dahulu atau tunggu token expired.
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                        example:
                          - >-
                            Anda sudah login di perangkat lain. Silakan logout
                            terlebih dahulu atau tunggu token expired.
          headers: {}
      security: []
  /auth/logout:
    post:
      summary: User logout
      deprecated: false
      description: Logout current user and revoke access token
      tags:
        - Authentication
      parameters: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logout berhasil!
                  logged_out_at:
                    type: string
                    format: date-time
                    example: '2024-01-15T10:30:00.000000Z'
          headers: {}
        '500':
          description: Logout failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Logout gagal!
          headers: {}
      security:
        - bearer: []
  /users/id/{user_id}:
    get:
      summary: Get user by ID
      deprecated: false
      description: ''
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: ''
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /users/profile:
    get:
      summary: Get authenticated user profile
      deprecated: false
      description: ''
      tags:
        - Users
      parameters: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security:
        - bearer: []
    post:
      summary: Update user profile
      deprecated: false
      description: ''
      tags:
        - Users
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User full name
                gender:
                  type: string
                  description: User gender
                image_url:
                  type: string
                  description: User profile image URL
                phone:
                  type: string
                  description: User phone number
                date_of_birth:
                  type: string
                  description: User date of birth (must be before today)
                bio:
                  type: string
                  description: User biography
                privacy_settings:
                  type: object
                  properties:
                    profile_visibility:
                      type: string
                    location_sharing:
                      type: boolean
                  required:
                    - profile_visibility
                    - location_sharing
                  description: User privacy settings
                notification_preferences:
                  type: object
                  properties:
                    email_notifications:
                      type: boolean
                    push_notifications:
                      type: boolean
                  required:
                    - email_notifications
                    - push_notifications
                  description: User notification preferences
            example:
              name: Mrs. Raquel Jacobi
              gender: male
              image_url: https://loremflickr.com/400/400?lock=4216571976996752
              phone: (528) 792-3784
              date_of_birth: '2025-11-15'
              bio: battle advocate  😠
              privacy_settings:
                profile_visibility: dolor dolore quis incididunt laborum
                location_sharing: true
              notification_preferences:
                email_notifications: true
                push_notifications: false
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Profile berhasil diperbarui!
                  data:
                    $ref: '#/components/schemas/User'
          headers: {}
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          headers: {}
      security:
        - bearer: []
  /places:
    get:
      summary: Get places with optional filters
      deprecated: false
      description: ''
      tags:
        - Places
      parameters:
        - name: search
          in: query
          description: ''
          required: false
          example: Fa
          schema:
            type: string
        - name: min_rating
          in: query
          description: ''
          required: false
          example: 4
          schema:
            type: number
        - name: longitude
          in: query
          description: ''
          required: false
          example: 109.20973
          schema:
            type: number
        - name: latitude
          in: query
          description: ''
          required: false
          example: 0.054269
          schema:
            type: number
        - name: radius
          in: query
          description: ''
          required: false
          example: 1
          schema:
            type: number
        - name: per_page
          in: query
          description: ''
          required: false
          example: 10
          schema:
            type: integer
            default: 10
        - name: food_type[]
          in: query
          description: ''
          required: false
          example:
            - Dessert
            - Seafood
          schema:
            type: array
            items:
              type: string
        - name: place_value[]
          in: query
          description: ''
          required: false
          example:
            - Buka 24 Jam
            - Pelayanan Ramah
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Places retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /places/id/{place_id}:
    get:
      summary: Get place by ID
      deprecated: false
      description: ''
      tags:
        - Places
      parameters:
        - name: place_id
          in: path
          description: ''
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Place retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: Place not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security:
        - bearer: []
  /places/id/{place_id}/reviews:
    get:
      summary: Get place reviews
      deprecated: false
      description: ''
      tags:
        - Places
      parameters:
        - name: place_id
          in: path
          description: ''
          required: true
          example: 9
          schema:
            type: integer
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /articles:
    get:
      summary: Get articles
      deprecated: false
      description: ''
      tags:
        - Articles
      parameters:
        - name: search
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: author_id
          in: query
          description: ''
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: ''
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Articles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /articles/id/{article_id}:
    get:
      summary: Get article by ID
      deprecated: false
      description: ''
      tags:
        - Articles
      parameters:
        - name: article_id
          in: path
          description: ''
          required: true
          example: 0
          schema:
            type: integer
      responses:
        '200':
          description: Article retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /gamification/checkin:
    post:
      summary: Perform check-in
      deprecated: false
      description: ''
      tags:
        - Gamification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - place_id
                - latitude
                - longitude
              properties:
                user_id:
                  type: integer
                place_id:
                  type: integer
                latitude:
                  type: number
                longitude:
                  type: number
            example:
              user_id: 50
              place_id: 1
              latitude: -81.2481
              longitude: -72.275
      responses:
        '200':
          description: Check-in successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /gamification/review:
    post:
      summary: Create review
      deprecated: false
      description: ''
      tags:
        - Gamification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - place_id
                - rating
                - content
              properties:
                user_id:
                  type: integer
                place_id:
                  type: integer
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                content:
                  type: string
        required: true
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /gamification/coins/add:
    post:
      summary: Add coins to user
      deprecated: false
      description: ''
      tags:
        - Gamification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - amount
                - reason
              properties:
                user_id:
                  type: integer
                amount:
                  type: integer
                reason:
                  type: string
        required: true
      responses:
        '200':
          description: Coins added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /gamification/coins/use:
    post:
      summary: Use coins
      deprecated: false
      description: ''
      tags:
        - Gamification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - amount
                - reason
              properties:
                user_id:
                  type: integer
                amount:
                  type: integer
                reason:
                  type: string
        required: true
      responses:
        '200':
          description: Coins used successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /gamification/exp/add:
    post:
      summary: Add experience points
      deprecated: false
      description: ''
      tags:
        - Gamification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - amount
                - reason
              properties:
                user_id:
                  type: integer
                amount:
                  type: integer
                reason:
                  type: string
        required: true
      responses:
        '200':
          description: Experience added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /leaderboard/id/{leaderboard_id}/top-users:
    get:
      summary: Get top users
      deprecated: false
      description: ''
      tags:
        - Leaderboard
      parameters:
        - name: leaderboard_id
          in: path
          description: ''
          required: true
          example: '15'
          schema:
            type: string
        - name: limit
          in: query
          description: ''
          required: false
          example: 10
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Top users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /leaderboard/weekly:
    get:
      summary: Get weekly leaderboard
      deprecated: false
      description: ''
      tags:
        - Leaderboard
      parameters: []
      responses:
        '200':
          description: Weekly leaderboard retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /leaderboard/monthly:
    get:
      summary: Get monthly leaderboard
      deprecated: false
      description: ''
      tags:
        - Leaderboard
      parameters: []
      responses:
        '200':
          description: Monthly leaderboard retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /leaderboard/id/{leaderboard_id}/user/id/{user_id}:
    get:
      summary: Get user rank
      deprecated: false
      description: ''
      tags:
        - Leaderboard
      parameters:
        - name: leaderboard_id
          in: path
          description: ''
          required: true
          example: '15'
          schema:
            type: string
        - name: user_id
          in: path
          description: ''
          required: true
          example: 3
          schema:
            type: integer
      responses:
        '200':
          description: User rank retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /leaderboard/refresh:
    post:
      summary: Refresh leaderboard cache
      deprecated: false
      description: ''
      tags:
        - Leaderboard
      parameters: []
      responses:
        '200':
          description: Leaderboard refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /leaderboard/cache:
    delete:
      summary: Clear leaderboard cache
      deprecated: false
      description: ''
      tags:
        - Leaderboard
      parameters: []
      responses:
        '200':
          description: Cache cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /social/posts/trending:
    get:
      summary: Get trending posts
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters:
        - name: per_page
          in: query
          description: ''
          required: false
          schema:
            type: integer
            default: 20
        - name: hours
          in: query
          description: ''
          required: false
          schema:
            type: integer
            default: 24
      responses:
        '200':
          description: Trending posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /posts/id/{post_id}:
    get:
      summary: Get post by ID
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters:
        - name: post_id
          in: path
          description: ''
          required: true
          example: 0
          schema:
            type: integer
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security: []
  /social/follow:
    post:
      summary: Follow user
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - target_user_id
              properties:
                user_id:
                  type: integer
                target_user_id:
                  type: integer
        required: true
      responses:
        '200':
          description: User followed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /social/unfollow:
    delete:
      summary: Unfollow user
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - target_user_id
              properties:
                user_id:
                  type: integer
                target_user_id:
                  type: integer
        required: true
      responses:
        '200':
          description: User unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /social/posts:
    post:
      summary: Create new post
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - place_id
                - content
              properties:
                user_id:
                  type: integer
                place_id:
                  type: integer
                content:
                  type: string
                image_url:
                  type: string
        required: true
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /social/posts/id/{post_id}/like:
    post:
      summary: Like a post
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters:
        - name: post_id
          in: path
          description: ''
          required: true
          example: 0
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
            examples: {}
      responses:
        '200':
          description: Post liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
    delete:
      summary: Unlike a post
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters:
        - name: post_id
          in: path
          description: ''
          required: true
          example: 0
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: integer
            examples: {}
      responses:
        '200':
          description: Post unliked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
  /social/posts/id/{post_id}/comments:
    get:
      summary: Get post comments
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters:
        - name: post_id
          in: path
          description: ''
          required: true
          example: 0
          schema:
            type: integer
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
    post:
      summary: Comment on post
      deprecated: false
      description: ''
      tags:
        - Social Media
      parameters:
        - name: post_id
          in: path
          description: ''
          required: true
          example: 0
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - content
              properties:
                user_id:
                  type: integer
                content:
                  type: string
            examples: {}
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security:
        - bearer: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john@example.com
        gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
        image_url:
          type: string
          format: uri
          example: https://example.com/avatar.jpg
        phone:
          type: string
          example: '+6281234567890'
        date_of_birth:
          type: string
          format: date
          example: '1990-01-15'
        bio:
          type: string
          example: Food enthusiast and explorer
        food_type:
          type: array
          items:
            type: string
          example:
            - traditional
            - modern
        place_value:
          type: array
          items:
            type: string
          example:
            - cozy
            - affordable
        total_coin:
          type: integer
          example: 155
        total_exp:
          type: integer
          example: 360
        status:
          type: boolean
          example: true
        last_login_at:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00.000000Z'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Place:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Warung Makan Sederhana
        category:
          type: string
          enum:
            - cafe
            - traditional
            - food_court
            - street_food
            - restaurant
          example: restaurant
        address:
          type: string
          example: Jl. Malioboro No. 123, Yogyakarta
        latitude:
          type: number
          format: float
          example: -7.7956
        longitude:
          type: number
          format: float
          example: 110.3695
        image_urls:
          type: array
          items:
            type: string
          example:
            - https://example.com/image1.jpg
            - https://example.com/image2.jpg
        rating:
          type: number
          format: float
          example: 4.5
        price_range:
          type: string
          enum:
            - cheap
            - moderate
            - expensive
          example: moderate
        is_partner:
          type: boolean
          example: true
        is_active:
          type: boolean
          example: true
    Article:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Best Places to Eat in Yogyakarta
        content:
          type: string
          example: Discover the most amazing culinary experiences...
        image_url:
          type: string
          example: https://example.com/article-image.jpg
        author:
          type: string
          example: Admin
        published_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        place_id:
          type: integer
          example: 1
        content:
          type: string
          example: Amazing food and great atmosphere!
        image_url:
          type: string
          example: https://example.com/post-image.jpg
        likes_count:
          type: integer
          example: 15
        comments_count:
          type: integer
          example: 3
        created_at:
          type: string
          format: date-time
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully
        data:
          type: object
          properties: {}
        errors:
          type: object
          properties: {}
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: An error occurred
        errors:
          type: object
          properties: {}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authentication using Laravel Sanctum
    bearer:
      type: http
      scheme: bearer
servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
security:
  - bearer: []
